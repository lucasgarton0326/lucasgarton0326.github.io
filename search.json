[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/leicstercitypost/index.html",
    "href": "posts/leicstercitypost/index.html",
    "title": "How Leicster City won the Premier League",
    "section": "",
    "text": "It all started the year before they had barely avoided relegation by only six points. With 29 matches played Leicester sat the bottom of the table and all looked lost, before they rattled of sting of matches that included a four-game win streak only to be broken by champions that year Chelsea.\nWhat made Leicester so successful the following year was a multitude of things. After finishing the prior season with a negative goal differential of –9. The Fox’s turned into one of the best goal scoring offenses in the Premier League as well as becoming a fortress in defense.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(gt)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\nlibrary(worldfootballR)\n\ntable<-read.csv(\"~/Desktop/Homework/SPMC 350/blogspmc350/posts/leicstercitypost/2015-2016premierleague table.csv\")\n\ngoals<-table%>%group_by(Squad, GF, GA)\nlc<-goals%>% filter(Squad== \"Leicester City\")\n\nggplot() + \n  geom_point(\n    data=goals, \n    aes(x=GF, y=GA, size=Pts),\n    alpha = .2) + \n  scale_size(range = c(2, 9), name=\"Points\") +\n  geom_point(\n    data=lc, \n    aes(x=GF, y=GA, size=Pts),color=\"blue\")+\n  geom_vline(xintercept = 51.3) + \n  geom_hline(yintercept = 51.3) +\n  geom_text(data=lc, aes(x=GF, y=GA+2),color=\"blue\", label=\"Leicester City\") +\n  geom_text(aes(x=60, y=60, label=\"Good Offense, Bad Defense\"), color=\"black\") +\n  geom_text(aes(x=40, y=40, label=\"Good Defense, Bad Offense\"), color=\"black\") +\nlabs(\n    x=\"Goals Scored\", \n    y=\"Goals Against\", \n    title=\"Leicester was one of the best teams on both sides of the ball.\", \n    subtitle=\"The foxes kept goal scoring pace with the big clubs in England while not allowing many goals.\", \n    caption=\"Source: Sports Refernce | By Lucas Garton\"\n    ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\n\n\n\n\nLeicester didn’t exactly dominate opponents on their way to their first Premier League title. Despite being one the better goalscoring teams the Fox’s held less than 50% possession.\n\n\nCode\nprem<-read.csv(\"~/Desktop/Homework/SPMC 350/blogspmc350/posts/leicstercitypost/2015-2016premierleague squad stats.csv\")\n\nlc<-prem%>%\n  filter(Squad==\"Leicester City\")\n\nggplot() + \n  geom_point(\n    data=prem, \n    aes(x=Gls, y=Poss)) +\n  geom_point(\n    data=lc, \n    aes(x=Gls, y=Poss),color=\"blue\") +\n  geom_vline(xintercept = 51.3) + \n  geom_hline(yintercept = 50) +\n  geom_text(data=lc, aes(x=Gls, y=Poss+1),color=\"blue\", label=\"Leicester City\") +\n  geom_text(aes(x=60, y=53, label=\"Good Offense\"), color=\"black\") +\n  geom_text(aes(x=30, y=45, label=\"Bad Offense\"), color=\"black\") +\nlabs(\n    x=\"Goals\", \n    y=\"Average Possesion%\", \n    title=\"Leicester sored lots of goals despite having less possesion.\", \n    subtitle=\"Fox's goal scoring was elite in the Premier League but they failed to hold on to the ball\", \n    caption=\"Source: Sports Refernce | By Lucas Garton\"\n    ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\")\n\n\n\n\n\nThe players that made the biggest difference for Leicester was Jamie Vardy and Englishman that had worked is way up through the English football system, and Riyad Mahrez a plyer that had only joined from second division France. Jamie Vardy was the leading goal scorer for the Fox’s and set the record for most games scored in a row at 11 during the season. Mahrez led the league in assists.\n\n\nCode\nbig5_player_standard <- fb_big5_advanced_season_stats(season_end_year= c(2016), stat_type= \"standard\", team_or_player= \"player\")\n\nprem<-big5_player_standard%>%\n  filter(Comp==\"Premier League\")%>%\n  mutate(points= Gls+Ast)%>%\n  filter(points>0)\n\njv<-prem%>% filter(\n  points==30)\nrm<-prem%>% filter(\n  points==28)\n\nggplot() + \n  geom_point(\n    data=prem, \n    aes(x=points, y=Min_Playing)) +\n  geom_point(\n    data=jv, \n    aes(x=points, y=Min_Playing),color=\"blue\")+\n    geom_point(\n    data=rm, \n    aes(x=points, y=Min_Playing),color=\"blue\") +\n  geom_text(data=jv, aes(x=points-1, y=Min_Playing+120),color=\"blue\", label=\"Jamie Vardy\") +\n  geom_text(data=rm, aes(x=points, y=Min_Playing-120),color=\"blue\", label=\"Riyad Mahrez\") +\n  labs(\n    x=\"Goals + Asists\", \n    y=\"Minutes Played\", \n    title=\"Leicester's frontline was prolific in 2015-2016.\", \n    subtitle=\"The Fox's offense was lead by Vardy and Mahrez who lead the legue in points\", \n    caption=\"Source: Sports Refernce | By Lucas Garton\"\n    ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\n\n\n\n\nDespite the all the goals scored by the prolific tandem for Leicester one thing stands out when looking at the numbers. When it comes to penalties awarded and penalties scored Leicester was awarded the most with 13 and scored the most with 10. Compared to other clubs the penalties stand out the second most in Manchester City. If not for the penalties scored the Leicester would have seen themselves just above mid-table team and not champions.\n\n\nCode\nprem<-read.csv(\"~/Desktop/Homework/SPMC 350/blogspmc350/posts/leicstercitypost/2015-2016premierleague squad stats.csv\")\n\ngoaltype<-prem%>%group_by(Squad)%>%\n  summarise(nonpens=sum(`G.PK`),\n            pens=sum(PK))\n\ngoaltypewide<-goaltype%>%\n  pivot_longer(cols = ends_with(\"pens\"),\n               names_to = \"Type\",\n               values_to = \"Goals\")\n\nggplot() + \n  geom_bar(\n    data=goaltypewide, \n    aes (x=reorder(Squad,Goals), weight=Goals, fill=Type)) + \n  coord_flip() +\n  labs(\n    x=\"\", \n    y=\"Goals\", \n    title=\"Leicester scored lots of goals but was helped by penalty goals\", \n    subtitle=\"The Fox's goal total was good enough for third but was propped up by the amount of penalty goals they had.\", \n    caption=\"Source: Sports Refernce | By Lucas Garton\"\n    ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )"
  },
  {
    "objectID": "posts/test-post/index.html",
    "href": "posts/test-post/index.html",
    "title": "Test Post",
    "section": "",
    "text": "Hello, I’m Lucas Garton and thank you for clicking on my blog. On this blog I put out sports analysis sotries that I find interesting."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blogspmc350",
    "section": "",
    "text": "football\n\n\nfantasy\n\n\n\n\n\n\n\n\n\n\n\nMay 11, 2023\n\n\nLucas Garton\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nbasketball\n\n\ndata\n\n\nmarchmadness\n\n\n\n\n\n\n\n\n\n\n\nApr 25, 2023\n\n\nLucas Garton\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nsoccer\n\n\ndata\n\n\ngermany\n\n\n\n\n\n\n\n\n\n\n\nDec 4, 2022\n\n\nLucas Garton\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nsoccer\n\n\ndata\n\n\nliecstercity\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nLucas Garton\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nlowercaseword\n\n\nlowercaseword\n\n\nlowercaseword\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nLucas Garton\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/Germanysworldcupfailure/index.html",
    "href": "posts/Germanysworldcupfailure/index.html",
    "title": "Germany’s 2018 failure at the World Cup",
    "section": "",
    "text": "To say the least Germany were one of if not the favorites to win the World Cup in 2018. Germany’s group seemed a favorable one for them being drawn with Mexico, Sweden and South Korea. They had a mix of young talent such as Julian Draxler and Timo Werner and cagey vets that had been in the previous World Cup squad that won the tournament in Mats Hummels, Toni Kroos and Manuel Neuer.\nComing in with all the momentum in the world Germany didn’t even get out of the group stage and actually finished last in it. So, what went so wrong between the two World Cups?\nLooking at 2014 Germany and 2018 Germany a couple things stand out. Germany in 2014 scored goals and lots of them compared to 2018 Germany, who could barely even get any across the line. Also is that 2018 Germany dominated possession in their three games averaging over 70% despite being undermanned in one of their games.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggalt)\nlibrary(gt)\nlibrary(ggbeeswarm)\nlibrary(ggrepel)\n\ngermanystats<-read.csv(\"~/Desktop/Homework/SPMC 350/blogspmc350/posts/Germanysworldcupfailure/wc2014&2018.csv\")\n\nnewgermanystats<-germanystats%>%filter(Squad == \"2014 Germany\" | Squad==\"2018 Germany\")%>%\n  mutate(\"Possession\" =Poss/100)%>%\n  select(Squad, Age,MP,Possession, per90Gls,per90Ast, Gls, Ast, CrdY, CrdR)\n\nnewgermanystats%>% gt()%>%\n  cols_label(\n    MP = \"Matches Played\",\n    per90Gls = \"Goals per Match\",\n    per90Ast = \"Assists per Match\",\n    Gls = \"Goals\",\n    Ast = \"Assists\",\n    CrdY = \"Yellow Cards\",\n    CrdR = \"Red Cards\"\n  ) %>%\n  tab_header(\n    title = \"How does 2014 Germany compare with 2018 Germany?\",\n    subtitle = \"2014 Germany had no problem scoring Goals while 2018 couldn't put anything in the back of the net.\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Lucas Garton  |  **Source:** Sports Reference\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\",size=24, align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")%>%\n    fmt_percent(\n    columns = c(Possession),\n    decimals = 1\n  ) %>%\n  tab_style(\n    style = list(\n      cell_fill(color = \"green\"),\n      cell_text(color = \"black\")\n      ),\n    locations = cells_body(\n      rows = Squad == \"2014 Germany\",\n      columns = \"per90Gls\")\n  )\n\n\n\n\n\n\n  \n    \n      How does 2014 Germany compare with 2018 Germany?\n    \n    \n      2014 Germany had no problem scoring Goals while 2018 couldn't put anything in the back of the net.\n    \n  \n  \n    \n      Squad\n      Age\n      Matches Played\n      Possession\n      Goals per Match\n      Assists per Match\n      Goals\n      Assists\n      Yellow Cards\n      Red Cards\n    \n  \n  \n    2014 Germany\n26.6\n7\n57.9%\n2.35\n1.57\n18\n12\n1\n0\n    2018 Germany\n27.2\n3\n71.7%\n0.67\n0.67\n2\n2\n3\n1\n  \n  \n    \n      By: Lucas Garton  |  Source: Sports Reference\n    \n  \n  \n\n\n\n\nWhen looking at the box scores for 2018 Germany they had plenty of chances to score. In 2018 they were expected to score around 5.5 goals in their three games. In reality they only scored two. Both of the goals coming in their only win of the tournament against Sweden. The difference between goals expected and goals was the second worse in the tournament.\n\n\nCode\nwc2018<-read.csv(\"~/Desktop/Homework/SPMC 350/blogspmc350/posts/Germanysworldcupfailure/2018worldcupsquadstats.csv\")\n\nnewwc2018<-wc2018%>%mutate(plusminusXG = Gls-xG)\nger<-newwc2018%>%filter(Squad == \"Germany\")\n\nggplot() + \n  geom_dumbbell(\n    data=newwc2018, \n    aes(y=reorder(Squad,plusminusXG),x=xG, xend=Gls),\n    colour = \"grey\",\n    colour_x = \"red\",\n    colour_xend = \"green\") + \n  geom_dumbbell(\n    data=ger,\n    aes(y=reorder(Squad,plusminusXG),x=xG, xend=Gls),\n    colour = \"black\",\n    colour_x = \"red\",\n    colour_xend = \"green\") +\n  labs(title = \"Germany way underperformed its expected goals tally\",\n       subtitle = \"Germany was in the red when copmapring actuall goals(green) to expected goals(red).\", \n       x=\"Goals\", \n       y=\"\",\n       caption=\"Source: Sports Reference | By Lucas Garton\") +\n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\n\n\n\n\nGermany performed better in the goalkeeping department. Manuel Neuer won the award for best goalkeeper in the 2014 World Cup and continued to perform in the 2018 tournament. Despite that it wasn’t up to par with the other goal keepers in the tournament within his group. Ochoa the best goalkeeper in Mexico’s history had one the best performances at the World Cup keeping El Tri in it with his many saves and Sweden’s’ Olsen averaged less goals against then Neuer.\n\n\nCode\nstats<-read.csv(\"~/Desktop/Homework/SPMC 350/blogspmc350/posts/Germanysworldcupfailure/2018goaliestats.csv\")\n\nmex<-stats%>%filter(Squad == \"Mexico\")\nger<-stats%>%filter(Squad == \"Germany\")\nswe<- stats%>%filter(Squad == \"Sweden\")\n\nggplot() + \n  geom_point(\n    data=stats, \n    aes(x=GA90, y=Savepercentage)\n    ) +\n  geom_point(\n    data=mex, \n    aes(x=GA90, y=Savepercentage), color= \"green\") +\n  geom_point(\n    data=swe, \n    aes(x=GA90, y=Savepercentage), color= \"blue\") +\n  geom_point(\n    data=ger, \n    aes(x=GA90, y=Savepercentage), color= \"yellow\") +\n  geom_text(data=mex, aes(x=GA90, y=Savepercentage+2), label=\"Ochoa\") +\n  geom_text(data=ger, aes(x=GA90, y=Savepercentage+2), label=\"Neuer\") +\n  geom_text(data=swe, aes(x=GA90, y=Savepercentage-2), label=\"Olsen\") +\n  labs(\n    x=\"Goals against per match\", \n    y=\"Save%\", \n    title=\"Geremnay's goalkeeping was average for the tournament\", \n    subtitle=\"The two teams that got out of Germany's group were just better between the sticks.\", \n    caption=\"Source: Sports Reference | By Lucas Garton\"\n    ) +\n  theme_minimal() +\n   theme(\n    plot.title = element_text(size = 18, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank(),\n    plot.title.position = \"plot\"\n    )\n\n\n\n\n\nAll in all, Germany may had a problem that many teams at the World Cup seem to run into and that is they don’t have a true goal scorer. None of the forwards that Germany brought within them managed to score a goal. They also got unlucky they had the chances and couldn’t convert them. Germany also had a brick wall in goal just the other teams in their group had a better one."
  },
  {
    "objectID": "posts/machinelerningpredictsmarchmadness/index.html",
    "href": "posts/machinelerningpredictsmarchmadness/index.html",
    "title": "Predicitng basketball with machine learning",
    "section": "",
    "text": "To say the least it did not go well, and not like how everyone else’s bracket doesn’t do well when for the only second time in history a one seed looses in the first round. I didn’t do well in that I had Pittsburgh, Furman, Gonzaga and Vermont in my final four. Three of those four teams didn’t even get the second weekend of the tournament.\nWhen using machine learning to predict the tournament I used rolling averages of the last ten games for teams going into the tournament because of how streaky college basketball is.\nI also used several predictive stats to help predict the tournament me not that they provided very much help though. To start I used points per possession I figured if you scored every time you had the ball you had to be a pretty good basketball team. Then to award teams that took three instead of two I calculated effective field goal percentage. To award teams that didn’t give up the ball I used turnover rate. Lastly I used free throw rate as my final predictor because free throws are easy points and can be difference between a bad team and a good team.\n\n\nCode\nlibrary(tidyverse)\nlibrary(hoopR)\nlibrary(zoo)\nlibrary(tidymodels)\nlibrary(bonsai)\nlibrary(janitor)\nlibrary(gt)\nset.seed(1234)\n\nteamgames <- load_mbb_team_box(seasons = 2015:2023) %>%\n  filter(game_date < as.Date(\"2023-03-14\")) \n  \n\nteamstats <- teamgames %>% \n  mutate(\n    possessions = field_goals_attempted - offensive_rebounds + turnovers + (.475 * free_throws_attempted),\n    ppp = team_score/possessions,\n    efgp= (field_goals_made+(0.5*three_point_field_goals_made))/field_goals_attempted,\n    turnoverrate=turnovers/(field_goals_attempted + (0.44*free_throws_attempted) + turnovers),\n    freethrowrate= free_throws_made/field_goals_attempted\n  )\n\nrollingteamstats <- teamstats %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_rolling_ppp = rollmean(lag(ppp, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_efgp = rollmean(lag(efgp, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_turnoverrate = rollmean(lag(turnoverrate, n=1), k=10, align=\"right\", fill=NA),\n    team_rolling_freethrowrate = rollmean(lag(freethrowrate, n=1), k=10, align=\"right\", fill=NA),\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_rolling_efgp,\n    team_rolling_turnoverrate,\n    team_rolling_freethrowrate\n    ) %>% \n  na.omit()\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_efgp = team_rolling_efgp,\n    opponent_rolling_turnoverrate = team_rolling_turnoverrate,\n    opponent_rolling_freethrowrate = team_rolling_freethrowrate\n  ) \n\ngames <- team_side %>% inner_join(opponent_side)\n\ngames <- games %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) %>% na.omit()\n\ngames$team_result <- relevel(games$team_result, ref=\"W\")\n\nmodelgames <- games %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp,\n    opponent_rolling_efgp,\n    team_rolling_efgp,\n    opponent_rolling_turnoverrate,\n    team_rolling_turnoverrate,\n    team_rolling_freethrowrate,\n    opponent_rolling_freethrowrate,\n    team_result\n    ) %>% na.omit()\n\ngame_split <- initial_split(modelgames, prop = .8)\ngame_train <- training(game_split)\ngame_test <- testing(game_split)\n\ngame_recipe <- \n  recipe(team_result ~ ., data = game_train) %>% \n  update_role(game_id, game_date, team_short_display_name, opponent_short_display_name, season, new_role = \"ID\") %>%\n  step_normalize(all_predictors())\n\nsvm_mod <- \n  svm_poly() %>%\n  set_engine(\"kernlab\") %>%\n  set_mode(\"classification\") \n\nsvm_workflow <- \n  workflow() %>% \n  add_model(svm_mod) %>% \n  add_recipe(game_recipe)\n\nsvm_fit <- \n  svm_workflow %>% \n  fit(data = game_train)\n\n\n Setting default kernel parameters  \n\n\nCode\nrollingteamstats <- teamstats %>% \n  arrange(game_date) %>%\n  group_by(team_short_display_name, season) %>%\n  mutate(\n    team_score = ((field_goals_made-three_point_field_goals_made) * 2) + (three_point_field_goals_made*3) + free_throws_made,\n    team_rolling_ppp = rollmean(ppp, k=10, align=\"right\", fill=NA),\n    team_rolling_efgp = rollmean(efgp, k=10, align=\"right\", fill=NA),\n    team_rolling_turnoverrate = rollmean(turnoverrate, k=10, align=\"right\", fill=NA),\n    team_rolling_freethrowrate = rollmean(freethrowrate, k=10, align=\"right\", fill=NA),\n    ) %>% \n  ungroup()\n\nteam_side <- rollingteamstats %>%\n  select(\n    game_id,\n    team_id, \n    team_short_display_name, \n    opponent_team_id, \n    game_date, \n    season, \n    team_score, \n    team_rolling_ppp,\n    team_rolling_efgp,\n    team_rolling_turnoverrate,\n    team_rolling_freethrowrate\n    ) %>% \n  na.omit()\n\nopponent_side <- team_side %>%\n  select(-opponent_team_id) %>% \n  rename(\n    opponent_team_id = team_id,\n    opponent_short_display_name = team_short_display_name,\n    opponent_score = team_score,\n    opponent_rolling_ppp = team_rolling_ppp,\n    opponent_rolling_efgp = team_rolling_efgp,\n    opponent_rolling_turnoverrate = team_rolling_turnoverrate,\n    opponent_rolling_freethrowrate = team_rolling_freethrowrate\n  )\n\ngames <- team_side %>% inner_join(opponent_side)\n\ngames <- games %>% mutate(\n  team_result = as.factor(case_when(\n    team_score > opponent_score ~ \"W\",\n    opponent_score > team_score ~ \"L\"\n))) %>% na.omit()\n\ngames$team_result <- relevel(games$team_result, ref=\"W\")\n\nmodelgames <- games %>% \n  select(\n    game_id, \n    game_date, \n    team_short_display_name, \n    opponent_short_display_name, \n    season, \n    team_rolling_ppp, \n    opponent_rolling_ppp,\n    opponent_rolling_efgp,\n    team_rolling_efgp,\n    opponent_rolling_turnoverrate,\n    team_rolling_turnoverrate,\n    team_rolling_freethrowrate,\n    opponent_rolling_freethrowrate,\n    team_result\n    ) %>% na.omit()\n\n Southround1 <- tibble(\n  team_short_display_name=\"Alabama\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"West Virginia\"\n) %>% add_row(\n  team_short_display_name=\"San Diego St\",\n  opponent_short_display_name=\"Charleston\"\n) %>% add_row(\n  team_short_display_name=\"Virginia\",\n  opponent_short_display_name=\"Furman\"\n) %>% add_row(\n  team_short_display_name=\"Creighton\",\n  opponent_short_display_name=\"NC State\"\n) %>% add_row(\n  team_short_display_name=\"Baylor\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Missouri\",\n  opponent_short_display_name=\"Utah State\"\n) %>% add_row(\n  team_short_display_name=\"Arizona\",\n  opponent_short_display_name=\"Princeton\"\n) \n  \nSouthround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Southround1)\n\nSouthround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Southround1games) \n\nSouthround1 <- svm_fit %>% \n  predict(new_data = Southround1games) %>%\n  bind_cols(Southround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nSouthround1 <- svm_fit %>% \n  predict(new_data = Southround1games, type=\"prob\") %>%\n  bind_cols(Southround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n  Southround2 <- tibble(\n  team_short_display_name=\"Maryland\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"NC State\",\n  opponent_short_display_name=\"UCSB\"\n) %>% add_row(\n  team_short_display_name=\"Furman\",\n  opponent_short_display_name=\"Charleston\"\n)   %>% add_row(\n  team_short_display_name=\"Utah State\",\n  opponent_short_display_name=\"Arizona\"\n)   \n  \nSouthround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Southround2)\n\nSouthround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Southround2games) \n\nSouthround2 <- svm_fit %>% \n  predict(new_data = Southround2games) %>%\n  bind_cols(Southround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nSouthround2 <- svm_fit %>% \n  predict(new_data = Southround2games, type=\"prob\") %>%\n  bind_cols(Southround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n  Southround3 <- tibble(\n  team_short_display_name=\"Furman\",\n  opponent_short_display_name=\"Texas A&M-CC\"\n) %>% add_row(\n  team_short_display_name=\"NC State\",\n  opponent_short_display_name=\"Arizona\"\n) \n  \nSouthround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Southround3)\n\nSouthround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Southround3games) \n\nSouthround3 <- svm_fit %>% \n  predict(new_data = Southround3games) %>%\n  bind_cols(Southround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nSouthround3 <- svm_fit %>% \n  predict(new_data = Southround3games, type=\"prob\") %>%\n  bind_cols(Southround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nSouthround4 <- tibble(\n  team_short_display_name=\"Furman\",\n  opponent_short_display_name=\"Arizona\"\n) \n  \nSouthround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Southround4)\n\nSouthround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Southround4games) \n\nSouthround4 <- svm_fit %>% \n  predict(new_data = Southround4games) %>%\n  bind_cols(Southround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nSouthround4 <- svm_fit %>% \n  predict(new_data = Southround4games, type=\"prob\") %>%\n  bind_cols(Southround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n  Eastround1 <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"Texas Southern\"\n) %>% add_row(\n  team_short_display_name=\"Memphis\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Duke\",\n  opponent_short_display_name=\"Oral Roberts\"\n) %>% add_row(\n  team_short_display_name=\"Tennessee\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Providence\"\n) %>% add_row(\n  team_short_display_name=\"Kansas St\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"Michigan St\",\n  opponent_short_display_name=\"USC\"\n) %>% add_row(\n  team_short_display_name=\"Marquette\",\n  opponent_short_display_name=\"Vermont\"\n) \n  \nEastround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Eastround1)\n\nEastround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Eastround1games) \n\nEastround1 <- svm_fit %>% \n  predict(new_data = Eastround1games) %>%\n  bind_cols(Eastround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nEastround1 <- svm_fit %>% \n  predict(new_data = Eastround1games, type=\"prob\") %>%\n  bind_cols(Eastround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n  Eastround2 <- tibble(\n  team_short_display_name=\"Purdue\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Louisiana\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Montana St\"\n) %>% add_row(\n  team_short_display_name=\"USC\",\n  opponent_short_display_name=\"Vermont\"\n) \n  \nEastround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Eastround2)\n\nEastround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Eastround2games) \n\nEastround2 <- svm_fit %>% \n  predict(new_data = Eastround2games) %>%\n  bind_cols(Eastround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nEastround2 <- svm_fit %>% \n  predict(new_data = Eastround2games, type=\"prob\") %>%\n  bind_cols(Eastround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n  Eastround3 <- tibble(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"FAU\"\n) %>% add_row(\n  team_short_display_name=\"Kentucky\",\n  opponent_short_display_name=\"Vermont\"\n) \n  \nEastround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Eastround3)\n\nEastround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Eastround3games) \n\nEastround3 <- svm_fit %>% \n  predict(new_data = Eastround3games) %>%\n  bind_cols(Eastround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nEastround3 <- svm_fit %>% \n  predict(new_data = Eastround3games, type=\"prob\") %>%\n  bind_cols(Eastround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nEastround4 <- tibble(\n  team_short_display_name=\"Oral Roberts\",\n  opponent_short_display_name=\"Vermont\"\n) \n  \nEastround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Eastround4)\n\nEastround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Eastround4games) \n\nEastround4 <- svm_fit %>% \n  predict(new_data = Eastround4games) %>%\n  bind_cols(Eastround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nEastround4 <- svm_fit %>% \n  predict(new_data = Eastround4games, type=\"prob\") %>%\n  bind_cols(Eastround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround1 <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"N Kentucky\"\n) %>% add_row(\n  team_short_display_name=\"Iowa\",\n  opponent_short_display_name=\"Auburn\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Drake\"\n) %>% add_row(\n  team_short_display_name=\"Indiana\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Iowa State\",\n  opponent_short_display_name=\"Pitt\"\n) %>% add_row(\n  team_short_display_name=\"Xavier\",\n  opponent_short_display_name=\"Kennesaw St\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Penn State\"\n) %>% add_row(\n  team_short_display_name=\"Texas\",\n  opponent_short_display_name=\"Colgate\"\n) \n  \nMidwestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Midwestround1)\n\nMidwestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Midwestround1games) \n\nMidwestround1 <- svm_fit %>% \n  predict(new_data = Midwestround1games) %>%\n  bind_cols(Midwestround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround1 <- svm_fit %>% \n  predict(new_data = Midwestround1games, type=\"prob\") %>%\n  bind_cols(Midwestround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround2 <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Iowa\"\n) %>% add_row(\n  team_short_display_name=\"Miami\",\n  opponent_short_display_name=\"Kent State\"\n) %>% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Xavier\"\n) %>% add_row(\n  team_short_display_name=\"Texas A&M\",\n  opponent_short_display_name=\"Colgate\"\n) \n  \nMidwestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Midwestround2)\n\nMidwestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Midwestround2games) \n\nMidwestround2 <- svm_fit %>% \n  predict(new_data = Midwestround2games) %>%\n  bind_cols(Midwestround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround2 <- svm_fit %>% \n  predict(new_data = Midwestround2games, type=\"prob\") %>%\n  bind_cols(Midwestround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround3 <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Miami\"\n) %>% add_row(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Colgate\"\n) \n  \nMidwestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Midwestround3)\n\nMidwestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Midwestround3games) \n\nMidwestround3 <- svm_fit %>% \n  predict(new_data = Midwestround3games) %>%\n  bind_cols(Midwestround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround3 <- svm_fit %>% \n  predict(new_data = Midwestround3games, type=\"prob\") %>%\n  bind_cols(Midwestround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround4 <- tibble(\n  team_short_display_name=\"Houston\",\n  opponent_short_display_name=\"Pitt\"\n)\n  \nMidwestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Midwestround4)\n\nMidwestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Midwestround4games) \n\nMidwestround4 <- svm_fit %>% \n  predict(new_data = Midwestround4games) %>%\n  bind_cols(Midwestround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nMidwestround4 <- svm_fit %>% \n  predict(new_data = Midwestround4games, type=\"prob\") %>%\n  bind_cols(Midwestround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nWestround1 <- tibble(\n  team_short_display_name=\"Kansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Illinois\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"VCU\"\n) %>% add_row(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Iona\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Arizona St\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"Grand Canyon\"\n) %>% add_row(\n  team_short_display_name=\"Northwestern\",\n  opponent_short_display_name=\"Boise St\"\n) %>% add_row(\n  team_short_display_name=\"UCLA\",\n  opponent_short_display_name=\"UNC Asheville\"\n) \n  \nWestround1games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Westround1)\n\nWestround1games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Westround1games) \n\nWestround1 <- svm_fit %>% \n  predict(new_data = Westround1games) %>%\n  bind_cols(Westround1games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nWestround1 <- svm_fit %>% \n  predict(new_data = Westround1games, type=\"prob\") %>%\n  bind_cols(Westround1) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nWestround2 <- tibble(\n  team_short_display_name=\"Arkansas\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Saint Mary's\",\n  opponent_short_display_name=\"UConn\"\n) %>% add_row(\n  team_short_display_name=\"TCU\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Boise St\",\n  opponent_short_display_name=\"UCLA\"\n) \n  \nWestround2games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Westround2)\n\nWestround2games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Westround2games) \n\nWestround2 <- svm_fit %>% \n  predict(new_data = Westround2games) %>%\n  bind_cols(Westround2games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nWestround2 <- svm_fit %>% \n  predict(new_data = Westround2games, type=\"prob\") %>%\n  bind_cols(Westround2) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nWestround3 <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Howard\"\n) %>% add_row(\n  team_short_display_name=\"Gonzaga\",\n  opponent_short_display_name=\"UCLA\"\n) \n  \nWestround3games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Westround3)\n\nWestround3games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Westround3games) \n\nWestround3 <- svm_fit %>% \n  predict(new_data = Westround3games) %>%\n  bind_cols(Westround3games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nWestround3 <- svm_fit %>% \n  predict(new_data = Westround3games, type=\"prob\") %>%\n  bind_cols(Westround3) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nWestround4 <- tibble(\n  team_short_display_name=\"UConn\",\n  opponent_short_display_name=\"Gonzaga\"\n)\n  \nWestround4games <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Westround4)\n\nWestround4games <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Westround4games) \n\nWestround4 <- svm_fit %>% \n  predict(new_data = Westround4games) %>%\n  bind_cols(Westround4games) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nWestround4 <- svm_fit %>% \n  predict(new_data = Westround4games, type=\"prob\") %>%\n  bind_cols(Westround4) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nFinalfour <- tibble(\n  team_short_display_name=\"Pitt\",\n  opponent_short_display_name=\"Gonzaga\"\n) %>% add_row(\n  team_short_display_name=\"Furman\",\n  opponent_short_display_name=\"Vermont\"\n)\n  \nFinalfourgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Finalfour)\n\nFinalfourgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Finalfourgames) \n\nFinalfour <- svm_fit %>% \n  predict(new_data = Finalfourgames) %>%\n  bind_cols(Finalfourgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nFinalfour <- svm_fit %>% \n  predict(new_data = Finalfourgames, type=\"prob\") %>%\n  bind_cols(Finalfour) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\nChampionship <- tibble(\n  team_short_display_name=\"Vermont\",\n  opponent_short_display_name=\"Gonzaga\"\n) \n  \nChampionshipgames <- modelgames %>% \n  group_by(team_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% \n  slice(1) %>% \n  select(-team_result, -starts_with(\"opponent\")) %>% \n  right_join(Championship)\n\nChampionshipgames <- modelgames %>% \n  group_by(opponent_short_display_name) %>% \n  filter(game_date == max(game_date) & season == 2023) %>% slice(1) %>% \n  ungroup() %>% \n  select(-team_result, -starts_with(\"team\"), -game_id, -game_date, -season) %>% \n  right_join(Championshipgames) \n\nChampionship <- svm_fit %>% \n  predict(new_data = Championshipgames) %>%\n  bind_cols(Championshipgames) %>% \n  select(.pred_class, team_short_display_name, opponent_short_display_name, everything())\n\nChampionship <- svm_fit %>% \n  predict(new_data = Championshipgames, type=\"prob\") %>%\n  bind_cols(Championship) %>% \n  select(.pred_class, .pred_W, .pred_L, team_short_display_name, opponent_short_display_name, everything())\n\n\nIn this project I many differnt forms of machine learing I could of used. In the end I used support vector machines to predict the tournament becasue in testing it tested the best, with 63% of the predictions it made being correct.\n\n\nCode\nsummary(game_recipe) %>%\n  select(variable, role) %>% \n  filter(role != \"ID\") %>%\n  gt() %>%\n  tab_header(\n    title = \"Predcitors\",\n    subtitle = \"Heavily Favoring possesions\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Lucas Garton\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\")\n\n\n\n\n\n\n  \n    \n      Predcitors\n    \n    \n      Heavily Favoring possesions\n    \n  \n  \n    \n      variable\n      role\n    \n  \n  \n    team_rolling_ppp\npredictor\n    opponent_rolling_ppp\npredictor\n    opponent_rolling_efgp\npredictor\n    team_rolling_efgp\npredictor\n    opponent_rolling_turnoverrate\npredictor\n    team_rolling_turnoverrate\npredictor\n    team_rolling_freethrowrate\npredictor\n    opponent_rolling_freethrowrate\npredictor\n    team_result\noutcome\n  \n  \n    \n      By: Lucas Garton\n    \n  \n  \n\n\n\n\nLooking back on my predictors I heavily favored teams that got extra possessions. Two of my four predictors revolved around teams possession stats. In retrospect if college basketball data was more available I would use more defensive stats as well as a strength of schedule predictor.\nOne of the worst part of my predictions was my algorithm thinking that the Number one overall seed of the tournament Alabama only had a 38.4% of beating the well known basketball power house of Texas A&M Corpus-Christi. For those who didn’t watch college basketball this year Alabama was one of the best teams all year and not even the most die hard of college basketball fan’s couldn’t name a single player that has ever played for Texas A&M-CC.\n\n\nCode\nSouthround1 %>% \n  select(team_short_display_name, .pred_class, .pred_W, opponent_short_display_name) %>%\n  gt() %>% \n  cols_label(\n    team_short_display_name = \"Team\",\n    .pred_class = \"Prediction\",\n    .pred_W = \"Win Confidence\",\n    opponent_short_display_name = \"Opponent\"\n  ) %>%\n  tab_header(\n    title = \"South Regional: Round 1\",\n    subtitle = \"Outrageous confidence by the algorithim\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Lucas Garton\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\", align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) %>%\n  opt_row_striping() %>% \n  opt_table_lines(\"none\") %>%\n    fmt_percent(\n    columns = c(.pred_W),\n    decimals = 1\n  )\n\n\n\n\n\n\n  \n    \n      South Regional: Round 1\n    \n    \n      Outrageous confidence by the algorithim\n    \n  \n  \n    \n      Team\n      Prediction\n      Win Confidence\n      Opponent\n    \n  \n  \n    San Diego St\nL\n23.4%\nCharleston\n    Virginia\nL\n19.4%\nFurman\n    Creighton\nL\n45.1%\nNC State\n    Arizona\nW\n55.3%\nPrinceton\n    Alabama\nL\n38.4%\nTexas A&M-CC\n    Baylor\nL\n48.9%\nUCSB\n    Missouri\nW\n55.1%\nUtah State\n    Maryland\nW\n57.9%\nWest Virginia\n  \n  \n    \n      By: Lucas Garton\n    \n  \n  \n\n\n\n\nEven though many of predictions were a miss for me there were still some, well not quite high points but more like rays of hope shining into the bottom of the darkest of wells. I did predict that Gonzaga and Uconn would meet in the Sweet 16 but it just so happened I predicted Gonzaga would win and not the actual eventual champs Uconn.\nAll in all I wouldn’t suggest you take my algorithm and try to use to place bets in Las Vegas. If you do so you may make yourself literally homeless."
  },
  {
    "objectID": "posts/fantasyrookiewrpredictions/index.html",
    "href": "posts/fantasyrookiewrpredictions/index.html",
    "title": "Fantasy Rookie WR Predictions",
    "section": "",
    "text": "To predict there total points for the upcoming season I used multiple different factors from their senior season. To start with I used the total yards, yards per reception,total touchdowns because I thought those three stats summed up what an individual WR can do best. Then next I used simple rating because obviously a player like Zay Flowers,who played at Boston College, isn’t going to play nearly the level of talent that a Jaxon Smith-Njigba does playing at Ohio State. Lastly I used overall and pre-draft grade because I figured normally good receivers get drafted for the most part.\nAfter running through all the data and using a combination of LightGBM and XGBoost to figure out who draft my model tells me to draft… Jalin Hyatt first. I guess my model can not account for the fact that the most bland QB in the league Daniel Jones would be throwing him the ball. Second was super close and can be considered more of a toss up with Quentin Johnston and Jordan Addison separated by only 1.3 predicted fantasy points.\n\n\nCode\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(cfbfastR)\nlibrary(janitor)\nlibrary(bonsai)\nlibrary(gt)\nset.seed(1234)\n\nwrstats <- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrdraftedstatswithratingsfixed.csv\") \ncurrentwrstats <- read_csv(\"https://mattwaite.github.io/sportsdatafiles/currentwrstats.csv\")\n\nwrselected <- wrstats %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_yards,\n    rating,\n    total_ypr,\n    pre_draft_grade,\n    total_touchdowns,\n    FantPt\n  ) %>% na.omit()\n\nplayer_split <- initial_split(wrselected, prop = .8)\nplayer_train <- training(player_split)\nplayer_test <- testing(player_split)\n\nplayer_recipe <- \n  recipe(FantPt ~ ., data = player_train) %>%\n  update_role(name, year, college_team, nfl_team, new_role = \"ID\")\n\nxg_mod <- boost_tree(\n  trees = tune(), \n  learn_rate = tune(),\n  tree_depth = tune(), \n  min_n = tune(),\n  loss_reduction = tune(), \n  sample_size = tune(), \n  mtry = tune(), \n  ) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"xgboost\")\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"regression\")\n\nxg_workflow <- \n  workflow() %>% \n  add_model(xg_mod) %>% \n  add_recipe(player_recipe)\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(player_recipe)\n\nxgb_grid <- grid_latin_hypercube(\n  trees(),\n  tree_depth(),\n  min_n(),\n  loss_reduction(),\n  sample_size = sample_prop(),\n  finalize(mtry(), player_train),\n  learn_rate()\n)\nplayer_folds <- vfold_cv(player_train)\nxgb_res <- tune_grid(\n  xg_workflow,\n  resamples = player_folds,\n  grid = xgb_grid,\n  control = control_grid(save_pred = TRUE)\n)\nbest_rmse <- select_best(xgb_res, \"rmse\")\nfinal_xgb <- finalize_workflow(\n  xg_workflow,\n  best_rmse\n)\n\nxg_fit <- \n  final_xgb %>% \n  fit(data = player_train)\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = player_train)\n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \n\nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\ncurrentwrselected <- currentwrstats %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_yards,\n    overall,\n    total_yards,\n    rating,\n    total_ypr,\n    pre_draft_grade,\n    total_touchdowns\n  ) %>% na.omit()\n\ncurrentxgpredict <- \n  xg_fit %>% \n  predict(new_data = currentwrselected) %>%\n  bind_cols(currentwrselected) \n\ncurrentxgpredict %>% \n  select(name, nfl_team, overall, .pred) %>%\n  top_n(5, wt=.pred) %>%\n  arrange(desc(.pred))%>% \n  gt()%>%\n  cols_label(\n    name = \"Name\",\n    nfl_team = \"NFL Team\",\n    overall = \"Overall\",\n    .pred = \"Predicted Fantasy PTS\"\n  ) %>%\n  tab_header(\n    title = \"My Top Five WRs\",\n    subtitle = \"It is close at the top\"\n  ) %>%  \n  tab_source_note(\n    source_note = md(\"**By:** Lucas Garton | Source: Sports Reference\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", weight = \"bold\",size=24, align = \"left\"),\n    locations = cells_title(\"title\")\n  ) %>% \n  tab_style(\n    style = cell_text(color = \"black\", align = \"left\"),\n    locations = cells_title(\"subtitle\")\n  ) %>%\n  tab_style(\n     locations = cells_column_labels(columns = everything()),\n     style = list(\n       cell_borders(sides = \"bottom\", weight = px(3)),\n       cell_text(weight = \"bold\", size=12)\n     )\n   ) \n\n\n\n\n\n\n  \n    \n      My Top Five WRs\n    \n    \n      It is close at the top\n    \n  \n  \n    \n      Name\n      NFL Team\n      Overall\n      Predicted Fantasy PTS\n    \n  \n  \n    Jalin Hyatt\nNew York\n73\n121.14637\n    Quentin Johnston\nLos Angeles\n21\n116.49673\n    Jordan Addison\nMinnesota\n23\n115.19057\n    Jayden Reed\nGreen Bay\n50\n95.81422\n    Jaxon Smith-Njigba\nSeattle\n20\n92.23390\n  \n  \n    \n      By: Lucas Garton | Source: Sports Reference\n    \n  \n  \n\n\n\n\n…Jalin Hyatt first with a predicted score of 121 fantsay points. I guess my model can not account for the fact that the most bland QB in the league Daniel Jones would be throwing him the ball. Second was super close and can be considered more of a toss up with Quentin Johnston and Jordan Addison separated by only 1.3 predicted fantasy points.\nWhen comparing my predictions for the 2023 rookie WRs to what rookie WRs scored in fantasy since 2013 they are not that bad. Sure no one is a once in a lifetime talent like Ja’mar Chase was in 2021 but they still are scoring higher than most rookies form years past.\n\n\nCode\nnewcurrentxgpredict<-currentxgpredict%>%filter(.pred>80)\n  ggplot() + \n  geom_point(data=wrstats, aes(x=FantPt, y=overall),color=\"grey\") +\n  geom_smooth(method=lm, se=FALSE) + \n  geom_point(data =newcurrentxgpredict, aes(x=.pred, y=overall), color=\"red\") +\n  labs(x=\"Fantasy Points\", y=\"Overall\", title=\"Middle of the Road Predictions for this Years Rookie WRs\", subtitle=\"Past rookie WR fantasy points versus what is predicted for this years class in red.\", caption=\"By Lucas Garton | Source: Sports Reference\") + \n  theme_minimal() + \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    axis.title = element_text(size = 8), \n    plot.subtitle = element_text(size=10), \n    panel.grid.minor = element_blank()\n    )\n\n\n\n\n\nComparatively 121 points at WR is what Chris Godwin did last year. Which ranked around 20th for WRs depending how you score in fantasy. Based of these predictions it be more than worth it to pick Hyatt, Johnston or Reed if they are sitting in your draft heading into the sixth or seventh round."
  },
  {
    "objectID": "posts/fantasyrookiewrpredictions/wrpredictions.html",
    "href": "posts/fantasyrookiewrpredictions/wrpredictions.html",
    "title": "blogspmc350",
    "section": "",
    "text": "wrstats <- read_csv(\"https://mattwaite.github.io/sportsdatafiles/wrdraftedstatswithratingsfixed.csv\") \n\nRows: 292 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): college_team, nfl_team, name\ndbl (12): year, overall, round, pick, pre_draft_grade, total_receptions, tot...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncurrentwrstats <- read_csv(\"https://mattwaite.github.io/sportsdatafiles/currentwrstats.csv\")\n\nRows: 31 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): college_team, nfl_team, name\ndbl (11): year, overall, round, pick, pre_draft_grade, total_receptions, tot...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nwrselected <- wrstats %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_yards,\n    rating,\n    total_ypr,\n    pre_draft_grade,\n    FantPt\n  ) %>% na.omit()\n\n\nplayer_split <- initial_split(wrselected, prop = .8)\nplayer_train <- training(player_split)\nplayer_test <- testing(player_split)\n\n\nplayer_recipe <- \n  recipe(FantPt ~ ., data = player_train) %>%\n  update_role(name, year, college_team, nfl_team, new_role = \"ID\")\nsummary(player_recipe)\n\n# A tibble: 10 × 4\n   variable        type      role      source  \n   <chr>           <list>    <chr>     <chr>   \n 1 name            <chr [3]> ID        original\n 2 year            <chr [2]> ID        original\n 3 college_team    <chr [3]> ID        original\n 4 nfl_team        <chr [3]> ID        original\n 5 overall         <chr [2]> predictor original\n 6 total_yards     <chr [2]> predictor original\n 7 rating          <chr [2]> predictor original\n 8 total_ypr       <chr [2]> predictor original\n 9 pre_draft_grade <chr [2]> predictor original\n10 FantPt          <chr [2]> outcome   original\n\n\n\nxg_mod <- boost_tree(\n  trees = tune(), \n  learn_rate = tune(),\n  tree_depth = tune(), \n  min_n = tune(),\n  loss_reduction = tune(), \n  sample_size = tune(), \n  mtry = tune(), \n  ) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"xgboost\")\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"regression\")\n\n\nxg_workflow <- \n  workflow() %>% \n  add_model(xg_mod) %>% \n  add_recipe(player_recipe)\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(player_recipe)\n\n\nxgb_grid <- grid_latin_hypercube(\n  trees(),\n  tree_depth(),\n  min_n(),\n  loss_reduction(),\n  sample_size = sample_prop(),\n  finalize(mtry(), player_train),\n  learn_rate()\n)\nplayer_folds <- vfold_cv(player_train)\nxgb_res <- tune_grid(\n  xg_workflow,\n  resamples = player_folds,\n  grid = xgb_grid,\n  control = control_grid(save_pred = TRUE)\n)\nbest_rmse <- select_best(xgb_res, \"rmse\")\nfinal_xgb <- finalize_workflow(\n  xg_workflow,\n  best_rmse\n)\n\n\nxg_fit <- \n  final_xgb %>% \n  fit(data = player_train)\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = player_train)\n\n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \n\n\nmetrics(xgpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      14.9  \n2 rsq     standard       0.927\n3 mae     standard      10.3  \n\n\n\nmetrics(lightgbmpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      24.7  \n2 rsq     standard       0.790\n3 mae     standard      17.8  \n\n\n\nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\n\nmetrics(lightgbmpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      42.1  \n2 rsq     standard       0.118\n3 mae     standard      30.0  \n\n\n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\n\nmetrics(xgpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      43.2  \n2 rsq     standard       0.118\n3 mae     standard      30.6  \n\n\n\ncurrentwrselected <- currentwrstats %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_yards,\n    overall,\n    total_yards,\n    rating,\n    total_ypr,\n    pre_draft_grade,\n  ) %>% na.omit()\n\n\ncurrentxgpredict <- \n  xg_fit %>% \n  predict(new_data = currentwrselected) %>%\n  bind_cols(currentwrselected) \n\n\ncurrentxgpredict %>% \n  select(name, nfl_team, overall, .pred) %>%\n  top_n(5, wt=.pred) %>%\n  arrange(desc(.pred)) %>%\n  gt()\n\n\n\n\n\n  \n  \n    \n      name\n      nfl_team\n      overall\n      .pred\n    \n  \n  \n    Jordan Addison\nMinnesota\n23\n115.51351\n    Jalin Hyatt\nNew York\n73\n107.55485\n    Quentin Johnston\nLos Angeles\n21\n102.49602\n    Jayden Reed\nGreen Bay\n50\n97.57854\n    Jaxon Smith-Njigba\nSeattle\n20\n87.63247\n  \n  \n  \n\n\n\n\n\nxg_mod <- boost_tree(\n  trees = tune(), \n  learn_rate = tune(),\n  tree_depth = tune(), \n  min_n = tune(),\n  loss_reduction = tune(), \n  sample_size = tune(), \n  mtry = tune(), \n  ) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"xgboost\")\n\nlightgbm_mod <- \n  boost_tree() %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(mode = \"regression\")\n\n\nxg_workflow <- \n  workflow() %>% \n  add_model(xg_mod) %>% \n  add_recipe(player_recipe)\n\nlightgbm_workflow <- \n  workflow() %>% \n  add_model(lightgbm_mod) %>% \n  add_recipe(player_recipe)\n\n\nxgb_grid <- grid_latin_hypercube(\n  trees(),\n  tree_depth(),\n  min_n(),\n  loss_reduction(),\n  sample_size = sample_prop(),\n  finalize(mtry(), player_train),\n  learn_rate()\n)\n\nplayer_folds <- vfold_cv(player_train)\n\nxgb_res <- tune_grid(\n  xg_workflow,\n  resamples = player_folds,\n  grid = xgb_grid,\n  control = control_grid(save_pred = TRUE)\n)\n\nbest_rmse <- select_best(xgb_res, \"rmse\")\n\nfinal_xgb <- finalize_workflow(\n  xg_workflow,\n  best_rmse\n)\n\n\nxg_fit <- \n  final_xgb %>% \n  fit(data = player_train)\n\nlightgbm_fit <- \n  lightgbm_workflow %>% \n  fit(data = player_train)\n\n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \n\nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_train) %>%\n  bind_cols(player_train) \n\n\nmetrics(xgpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      36.6  \n2 rsq     standard       0.511\n3 mae     standard      27.8  \n\n\n\nmetrics(lightgbmpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      24.7  \n2 rsq     standard       0.790\n3 mae     standard      17.8  \n\n\n\nlightgbmpredict <- \n  lightgbm_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\n\nmetrics(lightgbmpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      42.1  \n2 rsq     standard       0.118\n3 mae     standard      30.0  \n\n\n\nxgpredict <- \n  xg_fit %>% \n  predict(new_data = player_test) %>%\n  bind_cols(player_test) \n\n\nmetrics(xgpredict, FantPt, .pred)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard      38.0  \n2 rsq     standard       0.166\n3 mae     standard      27.4  \n\n\n\ncurrentdraft <- cfbd_draft_picks(2023) %>% filter(position == \"Wide Receiver\")\n\nstats18 <- cfbd_stats_season_player(2018, category = \"receiving\") %>% remove_empty(which=c(\"cols\")) %>% mutate(year = 2018)\n\nstats19 <- cfbd_stats_season_player(2019, category = \"receiving\") %>% remove_empty(which=c(\"cols\")) %>% mutate(year = 2019)\n\nstats20 <- cfbd_stats_season_player(2020, category = \"receiving\") %>% remove_empty(which=c(\"cols\")) %>% mutate(year = 2020)\n\nstats21 <- cfbd_stats_season_player(2021, category = \"receiving\") %>% remove_empty(which=c(\"cols\")) %>% mutate(year = 2021)\n\nstats22 <- cfbd_stats_season_player(2022, category = \"receiving\") %>% remove_empty(which=c(\"cols\")) %>% mutate(year = 2022)\n\ncurrent_stats <- bind_rows(stats18, stats19, stats20, stats21, stats22)\n\n\ncurrentrating <- cfbd_ratings_sp(2022) %>% mutate(draft_year = year+1)\n\n\ncurrenttotalstats <- current_stats %>% \n  group_by(athlete_id) %>%\n  summarize(\n    total_receptions = sum(receiving_rec),\n    total_yards = sum(receiving_yds),\n    total_touchdowns = sum(receiving_td),\n    average_long = mean(receiving_long),\n  ) %>%\n  mutate(\n    total_ypr = total_yards/total_receptions,\n    athlete_id = as.numeric(athlete_id)\n  )\n\n\ncurrentdrafted <- currentdraft %>% inner_join(currenttotalstats, by=c(\"college_athlete_id\"=\"athlete_id\")) \n\n\ncurrentwrdraftclass <- currentdrafted %>% inner_join(currentrating, by=c(\"college_team\"=\"team\", \"year\"=\"draft_year\"))\n\n\ncurrentwrselected <- currentwrdraftclass %>%\n  select(\n    name,\n    year,\n    college_team,\n    nfl_team,\n    overall,\n    total_yards,\n    overall,\n    total_yards,\n    rating,\n    total_ypr,\n    pre_draft_grade,\n  ) %>% na.omit()\n\n\ncurrentxgpredict <- \n  xg_fit %>% \n  predict(new_data = currentwrselected) %>%\n  bind_cols(currentwrselected) \n\n\ncurrentxgpredict %>% \n  top_n(5, wt=.pred) %>%\n  select(name, nfl_team, overall, .pred) %>%\n  arrange(desc(.pred)) %>%\n  gt()\n\n\n\n\n\n  \n  \n    \n      name\n      nfl_team\n      overall\n      .pred\n    \n  \n  \n    Quentin Johnston\nLos Angeles\n21\n115.58410\n    Jordan Addison\nMinnesota\n23\n105.32939\n    Jaxon Smith-Njigba\nSeattle\n20\n103.31348\n    Jayden Reed\nGreen Bay\n50\n91.02923\n    Jalin Hyatt\nNew York\n73\n88.71741"
  }
]